#        length=0.1, angle=90, code=3)
#}
load(file="../output/err_cv(gbm).RData")
library(scatterplot3d)
jpeg('3dscatterplot_original.jpg')
scatterplot3d(model_values[,3],model_values[,2],err_cv[,1],color = as.factor(model_values[,1]),angle = 45,xlab = "bags",ylab="trees",zlab="err_cv", lab.z = 2)
dev.off()
#library(ggplot2)
#ggplot(model_values,aes(x=))
model_values
#model_values <- seq(3, 11, 2)
depths<- c(3,4) ###
trees<- c(150,200) ###
bags<- c(0.8) ###
#depths<- c(2,3)
#trees<- c(10,20)
#bags<- seq(0.3,0.7,0.1)
model_values<- expand.grid(depths=depths,trees=trees,bags=bags)
#model_labels = paste("GBM with depth =", model_values)
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
load(file="../output/err_cv.RData")
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1]),]
}
par_best <- list(depth=model_best[,1],trees=model_best[,2],bags=model_best[,3])
#par_best <- list(depth=model_best[,1],trees=model_best[,2],bags=model_best[,3])
start_time<- Sys.time()
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best,run.gbm=T))
start_time<- Sys.time()
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best,run.gbm=T))
save(fit_train, file="../output/fit_train(new).RData")
end_time<- Sys.time()
timecost<- end_time-start_time
timecost
load(file="../output/fit_train(new).RData")
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
library("EBImage")
library(magrittr)
library(grid)
library(raster)
start_time<- Sys.time()
tm_test=NA
if(run.test){
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))  #xgb_result
}
library(profvis)
start_time<- Sys.time()
tm_test=NA
if(run.test){
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))  #xgb_result
}
if(run.test){
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))  #xgb_result
}
load(file="../output/fit_train(new).RData")
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
start_time<- Sys.time()
tm_test=NA
if(run.test){
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))  #xgb_result
}
end_time<- Sys.time()
timecost<- end_time-start_time
par_best
source("../lib/superResolution.R")
start_time<- Sys.time()
tm_test=NA
if(run.test){
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))  #xgb_result
}
end_time<- Sys.time()
timecost<- end_time-start_time
timecost
#jpeg('3dscatterplot_original.jpg')
s3d<- scatterplot3d(model_values[,3],model_values[,2],err_cv[,1],color = as.factor(model_values[,1]),angle = 45,xlab = "bags",ylab="trees",zlab="err_cv", lab.z = 2)
model_values
depths<- c(2,3)
trees<- c(10,20)
bags<- seq(0.3,0.7,0.1)
model_values
depths<- c(2,3)
trees<- c(10,20)
bags<- seq(0.3,0.7,0.1)
model_values<- expand.grid(depths=depths,trees=trees,bags=bags)
model_values
err_cv
#if(run.cv){
#  load("../output/err_cv.RData")
#  plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
#       main="Cross Validation Error", type="n", ylim=c(0, 0.25))
#  points(model_values, err_cv[,1], col="blue", pch=16)
#  lines(model_values, err_cv[,1], col="blue")
#  arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
#        length=0.1, angle=90, code=3)
#}
load(file="../output/err_cv.RData")
library(scatterplot3d)
#jpeg('3dscatterplot_original.jpg')
s3d<- scatterplot3d(model_values[,3],model_values[,2],err_cv[,1],color = as.factor(model_values[,1]),angle = 45,xlab = "bags",ylab="trees",zlab="err_cv", lab.z = 2)
load(file="../output/fit_train.RData")
source("../lib/superResolution.R")
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
start_time<- Sys.time()
start_time<- Sys.time()
tm_test=NA
if(run.test){
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))  #xgb_result
}
end_time<- Sys.time()
timecost<- end_time-start_time
err_cv
setwd("~/Desktop/5243/Fall2018-Project4-sec1--sec1-proj4-grp4/data")
file_name_vec <- list.files("../data/ground_truth")
file_name_vec
file_name_vec[0]
file_name_vec[1]
truth<- readLines('./ground_truth/group1_00000005.txt')
truth
truth2<- readLines('./ground_truth/group1_00000010.txt')
length(truth)
length(truth2)
truth2
c(truth,truth2)
truth_all<- []
tess_all<- []
for(i in c(1:length(file_name_vec))){
truth<- readLines('./ground_truth/'+file_name_vec[i])
truth_all<- c(truth_all,truth)
tess<- readLines('./tesseract/'+file_name_vec[i])
tess_all<- c(tess_all,tess)
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines('./ground_truth/'+file_name_vec[i])
truth_all<- c(truth_all,truth)
tess<- readLines('./tesseract/'+file_name_vec[i])
tess_all<- c(tess_all,tess)
}
paste('aa','bb')
paste0('aa','bb')
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/'+file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/'+file_name_vec[i]))
tess_all<- c(tess_all,tess)
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
tess_all<- c(tess_all,tess)
}
length(truth_all)
length(tess_all)
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
tess_all<- c(tess_all,tess)
print(length(truth)==length(tess))
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
tess_all<- c(tess_all,tess)
print(length(truth)==length(tess),file_name_vec[i])
}
help("print")
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
print(length(truth))
print(length(tess))
}
truth_all
length(truth_all)
split(' ',' ')
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
print(length(truth))
print(length(tess))
}
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
truth_all<- c(truth_all,truth)
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
#print(length(truth))
#print(length(tess))
}
list<- c(1:9)
missingline<- read.table('AddLine_ver2.xlsx')
file_name_vec <- list.files("../data/ground_truth")
missingline<- read.table('AddLine_ver2.xlsx')
missingline<- read.xlsx('AddLine_ver2.xlsx')
missingline<- read.csv('AddLine_ver2.xlsx')
install.packages("openxlsx")
library(openxlsx)
missingline<- read.xlsx('AddLine_ver2.xlsx')
missingline
for(j in missingline$FileName){}
for(j in missingline$FileName){print(j)}
missingline["group5_00000012_9.txt",]
missingline[which(missingline$FileName=="group5_00000012_9.txt"),]
missingline[which(missingline$FileName=="group5_00000012_9.txt"),line()]
missingline[which(missingline$FileName=="group5_00000012_9.txt"),"Line"]
error
error<- readLines('./tesseract/group1_00000005.txt')
error
head(error)
error[1:6,7:]
error[1:6]
error[7:]
error[8:-1]
error[8:length(error)]
list=c('a','b','c','d','e')
c(list[1:2],'kk',list[3:length(list)])
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- missingline[which(missingline$FileName==j),"Line"]
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)]),' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- missingline[which(missingline$FileName==j),"Line"]
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)]))
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- missingline[which(missingline$FileName==j),"Line"]
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
}
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
print(file_name_vec[i])
print(length(truth)==length(tess))
}
missingline$Line[1]
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
#print(file_name_vec[i])
#print(length(truth)==length(tess))
cat(capture.output(print(tess),file = j))
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
#print(file_name_vec[i])
#print(length(truth)==length(tess))
cat(capture.output(print(tess),file_name_vec[i]))
}
writeLines(error,sep = "\n")
write.table(error,file="testtest",sep = "\n")
write.table(error,file="testtest")
write.table(error,file="testtest")
error
write.table(error,file="testtest.txt")
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
#print(file_name_vec[i])
#print(length(truth)==length(tess))
write.table(tess,file = file_name_vec[i])
}
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
#print(file_name_vec[i])
print(length(truth)==length(tess))
#write.table(tess,file = file_name_vec[i])
}
length(truth_all)
length(tess_all)
file_name_vec <- list.files("../data/ground_truth")
file_name_vec <- list.files("../data/ground_truth")
library(openxlsx)
missingline<- read.xlsx('AddLine_ver2.xlsx')
missingline$FileName
#missingline$FileName
for(i in c(1:length(file_name_vec))){
current_file_name <- sub(".txt","",file_name_vec[i])
## png folder is not provided on github (the code is only on demonstration purpose)
current_tesseract_txt <- tesseract::ocr(paste("../data/png/",current_file_name,".png",sep=""))
error<- readLines(file_name_vec[i])
### clean the tessetact text (separate line by "\n", delete null string, transter to lower case)
#clean_tesseract_txt <- strsplit(current_tesseract_txt,"\n")[[1]]
#clean_tesseract_txt <- clean_tesseract_txt[clean_tesseract_txt!=""]
### save tesseract text file
#writeLines(clean_tesseract_txt, paste("../data/tesseract/",current_file_name,".txt",sep=""))
}
truth_all<- c()
tess_all<- c()
for(i in c(1:length(file_name_vec))){
truth<- readLines(paste0('./ground_truth/',file_name_vec[i]))
tess<- readLines(paste0('./tesseract/',file_name_vec[i]))
for (j in missingline$FileName) {
if(file_name_vec[i]==j){
addline<- as.numeric(missingline[which(missingline$FileName==j),"Line"])
if(addline>length(tess)){
tess<- c(tess,' ')
}
else{
tess<- c(tess[1:(addline-1)],' ',tess[addline:length(tess)])
}
}
}
truth_all<- c(truth_all,truth)
tess_all<- c(tess_all,tess)
#print(file_name_vec[i])
print(length(truth)==length(tess))
#write.table(tess,file = file_name_vec[i])
}
length(truth_all)
length(tess_all)
error<- readLines('./tesseract/group1_00000005.txt')
truth<- readLines('./ground_truth/group1_00000005.txt')
num<- 0
for(i in error){
splitted<- strsplit(i,' ')
splitted<- splitted[[1]]
num<- num+length(splitted)
#print(splitted[[1]])
#print(length(splitted[[1]]))
#num<- num+length(splitted)
}
print(num)
num<- 0
for(j in truth){
splitted<- strsplit(j,' ')
splitted<- splitted[[1]]
num<- num+length(splitted)
#print(splitted[[1]])
#print(length(splitted[[1]]))
#num<- num+length(splitted)
}
print(num)
writeLines(error,sep = "\n")
error
